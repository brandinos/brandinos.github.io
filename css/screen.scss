@import "font";

/*
Variables set to change changes quicker
*/
$transition: all 0.3s ease;
$dark-grey:   #222426;
$middle-blue: #00f6ed;
$light-white: #fdfdff;
$light-blue:  #edf9f9;
$dark-blue:  #546a7b;
$sidebar-color: rgba($dark-blue, .95);
$sidebar-item-color: rgba($dark-blue, 0);

$phone: "(min-width: 320px) and (max-width: 767px)";
$tablet: "(min-width: 768px) and (max-width: 1023px)";
$desktop: "(min-width: 1024px)";

::before, ::after {
    /* 
    Not using * selector,
    It slows down the website 
    */
    box-sizing: border-box;
}

html {
    /*
    so 1rem = 10 px and 16px = 1.6rem 
    */
    font-size: 62.5%;
    /* 
    we want a nice transition when scrolling 
    by a button or link click to 
    a certain section of the website.
    */
    scroll-behavior: smooth;
}
body, html {
    background-color: $dark-grey;
    color: $light-white;
}

body {
    font-smoothing: antialiased;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    line-height: 1.7;
    font-weight: 400;
    font-family: system-ui, "Segoe UI", Tahoma;
    margin: 0;
    /*
    The dark art of centering: text align center vs margin auto?
    #
    text align center only works with inline and full block elements,
    like the h1 and the p tag. It only works if the element has no width set.
    Otherwise, u must consider the use of margin auto.
    */
    text-align: center;
    /*
    em Inherits the default font size of the parent element,
    witch is in this case the body.
    #
    100% = 16px (default) 90px/16 = 5.625
    #
    To prevent this, we use rem. It's uses the root
    em. It will ignore all of the parent settings, such as the one
    on the body element. It's preferred to use rem. It is the most
    reliable, adaptive and lease error prone way to font styling.
    # default font size for the body: 1rem.
    */
    font-size: 1.6rem;
}

h1, h2, h3, h4, h5, h6 {
    letter-spacing: 0.243rem;
    font-weight: normal;

}

h1 {
    font-size: 3.4rem;
}

p {
    line-height: 2;
    /* 100% = 16px (default) 90px/16 = 5.625*/
    font-size: 1.6rem;
}

.container {
    box-sizing: border-box;
    /* using relative positioning makes the container 
    a perfect parent to position child elements with position 
    absolute and others, making it easy to change the position of elements.
    You can use this to fine tune the positions of elements on the screen
    with position relative and position absolute.
    */
    position: relative;
    margin: 0 auto;
    max-width: 980px;
    padding-left: 10px;
    padding-right: 10px;
}

section {
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

/* Elements */

button, a[role="button"] {
    display: inline-block;
    text-decoration: none;
    transition: $transition;
    border: none;
    outline: none;
    background-color: $dark-blue;
    color: #fff;
    padding: 12px 16px;
    border-radius: 6px;
    cursor: pointer;
    box-shadow: 0px 4px 0px 0px rgba(9,30,66,.25) ;
    &:hover {
        opacity: 0.7;
    }
   
}

.scroll {
    position: absolute;
    bottom: 30px;
}


header {
    background-color: $dark-blue;
    position: fixed;
    z-index: 999;
    top: 0;
    right: 0px;
    padding: 12px 16px;
    border-bottom-left-radius: 6px;
    color: $light-white;
    nav > ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }
    
}

hr {
    border: dotted #eaf6f6 6px;
    border-bottom: none;
    width: 4%;
    margin: 100px auto;
}

img {
    max-width: 100%;
    height: auto;
}
.img-circle {
    border-radius: 50%;
    width: 200px;
    height: auto;
    border: 6px solid $dark-blue;
    ;

}

/*
# Position: 
-static
All html elements are static by default. The go along with the html rules
and keep to the default html flow.
-Relative
Changes a elements position relative to another element, usefully to use with 
top, bottom, right, left, and it positions the element of where it used to be.
It does not affect the position of any other element on 
the screen. Adding a margin to its position where it used to be.
- Absolute
Positions a element relative (not changing width, etc)to its parent. 
The parent element must have a position of relative. It does affect the flow
of your html, because it removes the element from the html flow.
Adding a margin to it's 
parent element.
-fixed 
Positions an element on a fixed position, it does not change, whether or not 
you scroll the website. It will always remain on the same position,
because its is fixed. It can be, for example, be used for a navbar that follows
the user.
*/